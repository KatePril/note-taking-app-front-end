@startuml

class MyApp {
    + MyApp({super.key})
    + build(BuildContext context): Widget
}

class ItemApi {
    - {static} final _uri: String
    - ItemApi._internal()
    - {static} final _instance: ItemApi
    + factory ItemApi(): ItemApi
    + {static} createItem(item: Item): Future<String>
    + {static} updateItem(item: Item): Future<String>
    + {static} getItemsByNote(id: int): Future<List<Item>>
    + {static} getItemById(id: int): Future<Item>
    + {static} deleteItemById(id: int): Future<String>
}

class NoteApi {
    - {static} final _uri: String
    - NoteApi._internal()
    - {static} final _instance: NoteApi
    + factory NoteApi(): NoteApi
    + {static} createNote(note: Note): Future<String>
    + {static} updateNote(note: Note): Future<Note>
    + {static} getNotesByUser(id: int): Future<List<Note>>
    + {static} getNoteById(id: int): Future<Note>
    + {static} deleteNoteById(id: int): Future<String>
}

class UserApi {
    - {static} final _uri: String
    - UserApi._internal()
    - {static} final _instance: UserApi
    + factory UserApi(): UserApi
    + {static} createUser(user: User): Future<int>
    + {static} getUserId(user: User): Future<int>
    + {static} getUser(id: int): Future<User>
    + {static} changeUsername(user: User): Future<int>
    + {static} changePassword(user: User, oldPassword: String): Future<int>
    + {static} deleteUser(id: int): Future<String>
}

class BytesParser {
  - {static} _instance: BytesParser
  - BytesParser._internal()
  + factory BytesParser()
  + {static} parseString(str: String): Uint8List
}

class ItemFactory {
  - {static} _instance: ItemFactory
  - ItemFactory._internal()
  + static ItemFactory()
  + {static} createItem(item: Map<String, dynamic>): Item
}


class OffsetsParser {
  - {static} _instance: OffsetsParser
  - OffsetsParser._internal()
  + factory OffsetsParser()
  + {static} parseOffsets(offsets: List<Offset?>): String
  + {static} parseString(str: String): List<Offset?>
}


abstract class Jsonable {
    + toJson(): Map<String, dynamic>
}

class User implements Jsonable {
    + userId: int?
    + username: String
    + password: String
    + User(userId: int?, username: String, password: String)
    + User.newUser(username: String, password: String)
    + {static} fromJson(user: Map<String, dynamic>): User
    + toJson(): Map<String, dynamic>
}

class Note implements Jsonable {
    - _noteId: int?
    - _userId: int
    + title: String
    + Note(title: String, userId: int)
    + Note.withId(noteId: int?, title: String, userId: int)
    + noteId(): int
    + {static} fromJson(note: Map<String, dynamic>): Note
    + buildDocument(): Future<pw.Document>
    + toJson(): Map<String, dynamic>
}

abstract class Item implements Jsonable {
    + buildWidget(loadItems: Function): Widget
    + buildPdf(): pw.Page
}

class TextItem implements Item {
    - int? _itemId
    + String text
    + int noteId
    + TextItem(text: String, noteId: int)
    + TextItem.withId(itemId: int, text: String, noteId: int)
    + itemId: int
    + {static} fromJson(item: Map<String, dynamic>): TextItem
    + buildWidget(loadItems: Function): Widget
    + buildPdf(): pw.Page
    + toJson(): Map<String, dynamic>
}

class HeaderItem extends TextItem {
    + HeaderItem(text: String, noteId: int)
    + HeaderItem.withId(itemId: int, text: String, noteId: int)
    + {static} fromJson(item: Map<String, dynamic>): HeaderItem
    + buildWidget(loadItems: Function): Widget
    + buildPdf(): pw.Page
    + toJson(): Map<String, dynamic>
}

class ImageItem implements Item {
    - _itemId: int
    - _imageBytes: Uint8List
    - _noteId: int
    + ImageItem(imageBytes: Uint8List, noteId: int)
    + ImageItem.withId(itemId: int, imageBytes: Uint8List, noteId: int)
    + {static} fromJson(item: Map<String, dynamic>): ImageItem
    + buildWidget(loadItems: Function): Widget
    + buildPdf(): pw.Page
    + toJson(): Map<String, dynamic>
}

class CanvasItem implements Item {
  - _itemId: int?
  + imageBytes: Uint8List
  -+ points: List<Offset?>
  - _noteId: int
  + CanvasItem(imageBytes: Uint8List, noteId: int)
  + CanvasItem.withId(itemId: int, imageBytes: Uint8List, points: List<Offset?>, noteId: int)
  + {static} fromJson(item: Map<String, dynamic>): CanvasItem
  + itemId: int
  + buildWidget(loadItems: Function): Widget
  + buildPdf(): pw.Page
  + toJson(): Map<String, dynamic>
}

class ProfilePage {
    + final id: int
    + ProfilePage(this.id, {super.key});
    + createState(): State<StatefulWidget>
}

class _ProfilePageState {
    + user: User
    - _oldPassword: String
    - _message: String
    - _usernameController: TextEditingController
    - _oldPasswordController: TextEditingController
    - _newPasswordController: TextEditingController
    + initState(): void
    - _loadUser(): void
    - _updateUsername(): void
    - _updatePassword(): void
    - _deleteUser(): void
    + build(BuildContext context): Widget
}

class SignInPage {
    + SignInPage(): void
    + createState(): _SignInPageState
}

class _SignInPageState {
    - _user: User
    - _message: String
    - _usernameController: TextEditingController
    - _passwordController: TextEditingController
    + initState(): void
    - _clearState(): void
    - _navigateToHome(id: int): void
    - _createNewUser(): void
    - _logIn(): void
    + build(BuildContext context): Widget
}

class UserInput {
    - _textController: TextEditingController
    - _onChanged: ValueChanged<String>?
    - _labelText: String?
    - _hintText: String
    + UserInput(textController: TextEditingController, onChanged: ValueChanged<String>, labelText: String?, hintText: String)
    + build(BuildContext context): Widget
}

class MyHomePage {
    + title: String
    + id: int
    + MyHomePage(title: String, id: int): void
    + createState(): _MyHomePageState
}

class _MyHomePageState {
    - _notes: List<Note>
    + initState(): void
    - _loadNotes(): Future<void>
    - _addNote(): Future<void>
    + build(BuildContext context): Widget
}

class DeleteButton {
    + onPressed: Function
    + width: double?
    + DeleteButton(onPressed: Function, width: double?): void
    + createState(): _DeleteButtonState
}

class _DeleteButtonState {
    + build(BuildContext context): Widget
}

class NoteWidget {
    - _note: Note
    - _loadNotes: Function
    + NoteWidget(note: Note, loadNotes: Function): void
    + build(BuildContext context): Widget
}

class NoteScreen {
    + id: int
    + homeState: Function
    + NoteScreen(id: int, homeState: Function): void
    + createState(): _NoteScreenState
}

class _NoteScreenState {
    - _items: List<Item>
    - _note: Note
    - _titleController: TextEditingController
    + initState(): void
    _ _loadNote(): Future<void>
    _ _loadItems(): Future<void>
    + build(context: BuildContext): Widget
}

class NoteBottomNavigationBar {
  - Map<int, Function()> _functions
  + NoteBottomNavigationBar(functions: Map<int, Function()>)
  + build(context: BuildContext): Widget
}

class NoteCanvas {
  + final setImage: Function(Future<Uint8List>, List<Offset?>)
  + points: List<Offset?>
  + NoteCanvas(key: Key?, setImage: Function(Future<Uint8List>, List<Offset?>))
  + createState(): _NoteCanvasState
}

class _NoteCanvasState {
  + final points: List<Offset?>
  + initState(): void
  + build(BuildContext context): Widget
  - _createImageBytes(BuildContext context): Future<Uint8List>
}

class Pencil {
  - _points: List<Offset?>
  + Pencil(points: List<Offset?>)
  + paint(canvas: Canvas, size: Size): void
  + shouldRepaint(oldDelegate: CustomPainter): bool
}

class CanvasItemWidget {
  - item: CanvasItem
  - loadItems: Function
  + CanvasItemWidget(key: Key?, item: CanvasItem, loadItems: Function)
  + createState(): _CanvasItemWidgetState
}

class _CanvasItemWidgetState {
  + build(BuildContext context): Widget
}

class CanvasDialogShower {
  - {static} final _instance: CanvasDialogShower
  - CanvasDialogShower._internal()
  + factory CanvasDialogShower()
  + showCanvasDialog(context: BuildContext, loadItems: Function(), noteId: int?, item: CanvasItem?): void
}

class CameraDeviceProvider {
  - {static} final _instance: CameraDeviceProvider
  - CameraDeviceProvider._internal()
  + factory CameraDeviceProvider()
  + getPreferredCameraDevice(context: BuildContext): Future<CameraDevice?>
}

class ImageSourceProvider {
  - {static} final _instance: ImageSourceProvider
  - ImageSourceProvider._internal()
  + factory ImageSourceProvider()
  + getImageSource(context: BuildContext): Future<ImageSource>
}

class MyImageInput {
  + setImage: Function(Uint8List)
  + MyImageInput(key: Key?, setImage: Function(Uint8List))
  + createState(): _MyImageInputState
}

class _MyImageInputState {
  - final _imageInputImages: List<XFile>
  + build(BuildContext context): Widget
  - _onImageSelected(image: XFile): void
  - _onImageRemoved(image: XFile, index: int): void
}

class ImageDialogShower {
  - {static} final _instance: ImageDialogShower
  - ImageDialogShower._internal()
  + factory ImageDialogShower()
  + showImageDialog(context: BuildContext, loadItems: Function(), noteId: int): void
}

class ImageItemWidget {
  + item: ImageItem
  + loadItems: Function
  + ImageItemWidget(key: Key?, item: ImageItem, loadItems: Function)
  + createState(): _ImageItemWidgetState
}

class _ImageItemWidgetState {
  + build(BuildContext context): Widget
}

class HeaderItemWidget {
  + final item: HeaderItem
  + final loadItems: Function
  + HeaderItemWidget(key: Key?, item: HeaderItem, loadItems: Function)
  + createState(): _HeaderItemWidgetState
}

class _HeaderItemWidgetState {
  - _item: HeaderItem
  - _headerController: TextEditingController
  + initState(): void
  + build(BuildContext context): Widget
}

class TextItemWidget {
  + item: TextItem
  + loadItems: Function
  + TextItemWidget(key: Key?, item: TextItem, loadItems: Function)
  + createState(): _TextItemWidgetState
}

class _TextItemWidgetState {
  - _item: TextItem
  - _textController: TextEditingController
  + initState(): void
  + build(BuildContext context): Widget
}


MyApp --> SignInPage :uses
ItemApi --> ItemFactory :uses
CanvasItem --> OffsetsParser :uses
CanvasItem --> BytesParser :uses
ImageItem --> BytesParser :uses
SignInPage --> _SignInPageState :uses
ProfilePage --> _ProfilePageState :uses
_SignInPageState --> UserInput :uses
_ProfilePageState --> UserInput :uses
MyHomePage --> _MyHomePageState :uses
SignInPage --> MyHomePage :uses
MyHomePage --> ProfilePage :uses
MyHomePage --> NoteWidget :uses
MyHomePage --> NoteScreen :uses
NoteWidget --> DeleteButton :uses
NoteScreen --> _NoteScreenState :uses
DeleteButton --> _DeleteButtonState :uses
_NoteScreenState --> NoteBottomNavigationBar :uses
_NoteScreenState --> DeleteButton :uses
_SignInPageState --o User
_ProfilePageState --o User
UserApi --> User
NoteApi --> Note
_MyHomePageState --o Note
_NoteScreenState --o Note
NoteCanvas --> _NoteCanvasState :uses
_NoteCanvasState --> Pencil :uses
CanvasDialogShower --> NoteCanvas :uses
CanvasItem --> CanvasItemWidget :uses
CanvasItemWidget --> _CanvasItemWidgetState :uses
CanvasItemWidget --> CanvasDialogShower :uses
NoteScreen --> CanvasDialogShower :uses
MyImageInput --> _MyImageInputState :uses
_MyImageInputState --> CameraDeviceProvider :uses
ImageDialogShower --> MyImageInput :uses
_NoteScreenState --> ImageDialogShower :uses
_MyImageInputState --> ImageSourceProvider :uses
ImageItemWidget --> _ImageItemWidgetState :uses
ImageItem --> ImageItemWidget :uses
HeaderItemWidget --> _HeaderItemWidgetState :uses
TextItemWidget --> _TextItemWidgetState :uses
HeaderItem --> HeaderItemWidget :uses
TextItem --> TextItemWidget :uses
_CanvasItemWidgetState --> ItemApi :uses
CanvasDialogShower --> ItemApi :uses
_HeaderItemWidgetState --> ItemApi: uses
ImageDialogShower --> ItemApi :uses
_ImageItemWidgetState --> ItemApi :uses
_TextItemWidgetState --> ItemApi :uses
_NoteScreenState --> ItemApi :uses
_MyHomePageState --> NoteApi :uses
NoteWidget --> NoteApi :uses
_NoteScreenState --> NoteApi :uses
_ProfilePageState --> UserApi :uses
_SignInPageState --> UserApi :uses
@enduml